//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/CustomInputMap/IndexControlRemap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IndexControlRemap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IndexControlRemap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IndexControlRemap"",
    ""maps"": [
        {
            ""name"": ""ValveIndexGamepad"",
            ""id"": ""cd5f677b-43d0-4261-b219-8ac3dffbe70d"",
            ""actions"": [
                {
                    ""name"": ""GripAndTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""e3e7abab-6d5a-4325-8a11-3703f5a92834"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ButtonA"",
                    ""type"": ""Button"",
                    ""id"": ""c0d2fc4c-ccd6-4c4a-baf3-5b2807a1f7bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""GripAndTrigger"",
                    ""id"": ""c0932271-8d85-48bc-b750-322d8e4e1b71"",
                    ""path"": ""OneModifier"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripAndTrigger"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""3cd4408d-c765-4426-abda-682b34202d7d"",
                    ""path"": ""<ValveIndexController>/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripAndTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""16ff067b-2775-40f5-af31-ed3042ec8ebb"",
                    ""path"": ""<ValveIndexController>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripAndTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1ba160d4-c206-41da-b04a-26ee16404a73"",
                    ""path"": ""<ValveIndexController>/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ValveIndexGamepad
        m_ValveIndexGamepad = asset.FindActionMap("ValveIndexGamepad", throwIfNotFound: true);
        m_ValveIndexGamepad_GripAndTrigger = m_ValveIndexGamepad.FindAction("GripAndTrigger", throwIfNotFound: true);
        m_ValveIndexGamepad_ButtonA = m_ValveIndexGamepad.FindAction("ButtonA", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ValveIndexGamepad
    private readonly InputActionMap m_ValveIndexGamepad;
    private IValveIndexGamepadActions m_ValveIndexGamepadActionsCallbackInterface;
    private readonly InputAction m_ValveIndexGamepad_GripAndTrigger;
    private readonly InputAction m_ValveIndexGamepad_ButtonA;
    public struct ValveIndexGamepadActions
    {
        private @IndexControlRemap m_Wrapper;
        public ValveIndexGamepadActions(@IndexControlRemap wrapper) { m_Wrapper = wrapper; }
        public InputAction @GripAndTrigger => m_Wrapper.m_ValveIndexGamepad_GripAndTrigger;
        public InputAction @ButtonA => m_Wrapper.m_ValveIndexGamepad_ButtonA;
        public InputActionMap Get() { return m_Wrapper.m_ValveIndexGamepad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ValveIndexGamepadActions set) { return set.Get(); }
        public void SetCallbacks(IValveIndexGamepadActions instance)
        {
            if (m_Wrapper.m_ValveIndexGamepadActionsCallbackInterface != null)
            {
                @GripAndTrigger.started -= m_Wrapper.m_ValveIndexGamepadActionsCallbackInterface.OnGripAndTrigger;
                @GripAndTrigger.performed -= m_Wrapper.m_ValveIndexGamepadActionsCallbackInterface.OnGripAndTrigger;
                @GripAndTrigger.canceled -= m_Wrapper.m_ValveIndexGamepadActionsCallbackInterface.OnGripAndTrigger;
                @ButtonA.started -= m_Wrapper.m_ValveIndexGamepadActionsCallbackInterface.OnButtonA;
                @ButtonA.performed -= m_Wrapper.m_ValveIndexGamepadActionsCallbackInterface.OnButtonA;
                @ButtonA.canceled -= m_Wrapper.m_ValveIndexGamepadActionsCallbackInterface.OnButtonA;
            }
            m_Wrapper.m_ValveIndexGamepadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GripAndTrigger.started += instance.OnGripAndTrigger;
                @GripAndTrigger.performed += instance.OnGripAndTrigger;
                @GripAndTrigger.canceled += instance.OnGripAndTrigger;
                @ButtonA.started += instance.OnButtonA;
                @ButtonA.performed += instance.OnButtonA;
                @ButtonA.canceled += instance.OnButtonA;
            }
        }
    }
    public ValveIndexGamepadActions @ValveIndexGamepad => new ValveIndexGamepadActions(this);
    public interface IValveIndexGamepadActions
    {
        void OnGripAndTrigger(InputAction.CallbackContext context);
        void OnButtonA(InputAction.CallbackContext context);
    }
}
